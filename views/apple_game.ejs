<!DOCTYPE HTML>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>apple game<% if (practice) { %> practice<% } %></title>
	<meta name="apple-mobile-web-app-title" content="apple game<% if (practice) { %> practice<% } %>">
	<meta name="color-scheme" content="light">
	<link rel="apple-touch-icon" href="files/icons/icon_box_a.png" sizes="180x180">
	<link rel="stylesheet" type="text/css" href="files/gamepage-css/gamepage.css">

	<script src="files/gamepage-js/webfont.js"></script>
	<script src="files/gamepage-js/createjs-1.0.0.min.js"></script>
	<script src="fruit_box_a_006_o<% if (practice) { %>_practice<% } %>.js"></script>

	<script>
		var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;

		function init() {
			canvas = document.getElementById("canvas");
			anim_container = document.getElementById("animation_container");
			dom_overlay_container = document.getElementById("dom_overlay_container");
			var comp = AdobeAn.getComposition("7475C6A158E3BF4B8C03C4B79FFD5BA3");
			var lib = comp.getLibrary();
			var loader = new createjs.LoadQueue(false);
			loader.addEventListener("fileload", function (evt) { handleFileLoad(evt, comp) });
			loader.addEventListener("complete", function (evt) { handleComplete(evt, comp) });
			var lib = comp.getLibrary();
			loader.loadManifest(lib.properties.manifest);
		}

		function handleFileLoad(evt, comp) {
			var images = comp.getImages();
			if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
		}

		function handleComplete(evt, comp) {
			//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
			var lib = comp.getLibrary();
			var ss = comp.getSpriteSheet();
			var queue = evt.target;
			var ssMetadata = lib.ssMetadata;
			for (i = 0; i < ssMetadata.length; i++) {
				ss[ssMetadata[i].name] = new createjs.SpriteSheet({ "images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames })
			}
			var preloaderDiv = document.getElementById("_preload_div_");
			preloaderDiv.style.display = 'none';
			dom_overlay_container.style.display = canvas.style.display = 'block';
			exportRoot = new lib.fruit_box_a_006();
			stage = new lib.Stage(canvas);
			//Registers the "tick" event listener.
			fnStartAnimation = function () {
				stage.addChild(exportRoot);
				createjs.Ticker.setFPS(lib.properties.fps);
				createjs.Ticker.addEventListener("tick", stage);
			}
			//Code to support hidpi screens and responsive scaling.
			AdobeAn.makeResponsive(false, 'both', false, 1, [canvas, anim_container, dom_overlay_container]);
			AdobeAn.compositionLoaded(lib.properties.id);
			fnStartAnimation();
		}

		//webfont.js
		function funLoadWebFont(e) {
			WebFont.load(
				{
					custom:
					{
						families: ["subset_2019_06_10"],
						urls: ["files/gamepage-css/webfont.css"]
					},
					//loaded all webfonts
					active: function () {
						//app start
						init();
					},
					//failed
					inactive: function () {
					}
				});
		}

		if (navigator.userAgent.indexOf('iPad') > 0) {
			if (window.innerWidth > window.innerHeight) {
				document.write('<meta name="viewport" content="width=880">');
			} else {
				document.write('<meta name="viewport" content="width=700">');
			}
		} else {
			document.write('<meta name="viewport" content="width=960">');
		}

		ef_lang = "en";

	</script>

</head>

<body onload="funLoadWebFont();" style="margin-top: 30px; text-align: center;">
	<div style="display: inline-block;">
		<p style="text-align: center" style="margin-left: 30px;">
			Currently playing <span style="font-weight: bold;"><% if (practice) {%>practice<% } else { %>vanilla<% } %></span>.
			Switch to <% if (practice) {%><a href="/">vanilla</a><% } else { %><a href="/practice">practice</a><% } %>?
		</p>
		<div id="animation_container">
			<canvas id="canvas" width="720" height="470"
				style="position: absolute; display: block;"></canvas>
			<div id="dom_overlay_container"
				style="pointer-events:none; overflow:hidden; width:720px; height:470px; position: absolute; left: 0px; top: 0px; display: block;">
			</div>
		</div>
		<div id='_preload_div_' style='position:relative; top: -265px;'>
			<img src="files/gamepage-images/nowloading.gif" />
		</div>
	</div>
	<% if (practice) { %>
		<div><div id="settings">
			<div style="margin-bottom: 20px;">
				<span style="font-weight: bold; text-decoration: underline;">
					Settings
				</span>
			</div>
			<div>
				<span style="font-weight: bold;">
					Time:
				</span>
				<input type="number" id="timeAll" min="5" max="600" value="120" style="width: 4em;" required> seconds
			</div>
			<div>
				<span style="font-weight: bold;">
					Colors:
				</span>
				<input type="color" id="appleColor" value="#FF3333" style="width: 2em; height: 2em; border: none; background-color: rgba(90, 90, 90, 0.15);" onchange="changeAppleColor()" required>
				<button onclick="setAppleColor('#FF3333')">Default</button>
				<button onclick="setAppleColor('#FF6655')">Light</button>
			</div>
			<div>
				<span style="font-weight: bold;">
					Max:
				</span>
				<input type="checkbox" id="powerSaving" onchange="changePowerSaving()" required>
				<span>
					(resource intensive!)
				</span>
			</div>
			<div>
				<span style="font-weight: bold;">
					Dark theme:
				</span>
				<input type="checkbox" id="darkMode" onchange="changeDarkMode()" required>
			</div>
			<script>
				let vars = ["timeAll", "appleColor"];
				let checkboxes = ["powerSaving", "darkMode"];
				
				for (const i of vars) {
					let e = document.getElementById(i);
					e.value = localStorage.getItem(i) || e.value;

					e.addEventListener('input', el => {
						localStorage.setItem(i, e.value);
					});
				}

				for (const i of checkboxes) {
					let e = document.getElementById(i);
					e.checked = (localStorage.getItem(i) || e.checked.toString()) === 'true';

					e.addEventListener('input', el => {
						localStorage.setItem(i, e.checked);
					});
				}

				function setAppleColor(c) {
					document.getElementById("appleColor").value = c;
					changeAppleColor(c);
				}

				function changeAppleColor() {
					exportRoot.mm?.updateAppleColor(document.getElementById("appleColor").value);
				}

				function changePowerSaving() {
					exportRoot.mm?.updatePowerSaving(document.getElementById("powerSaving").checked);
				}

				function changeDarkMode() {
  					if (document.getElementById("darkMode").checked) {
						document.body.classList.add("dark-mode");
						document.querySelector('meta[name="color-scheme"]').setAttribute("content", "dark");
					} else {
						document.body.classList.remove("dark-mode");
						document.querySelector('meta[name="color-scheme"]').setAttribute("content", "light");
					}
				}

				changeDarkMode();
			</script>
		</div></div>
	<% } %>
</body>

</html>